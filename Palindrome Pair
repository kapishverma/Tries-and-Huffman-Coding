import java.util.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static ArrayList<String> takeInput() throws IOException {
        ArrayList<String> words = new ArrayList<>();

        int n = Integer.parseInt(br.readLine().trim());

        if (n == 0) {
            return words;
        }
        
        String[] listOfWords; 
        listOfWords = br.readLine().split("\\s");
        

        for (int i = 0; i < n; ++i) {
            words.add(listOfWords[i]);
        }

        return words;
    }

    public static void main(String[] args) throws NumberFormatException, IOException {
        Trie root = new Trie();

        ArrayList<String> words = takeInput();
        System.out.println(root.isPalindromePair(words));
    } 

}


class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;
	boolean isPalindrome;// ye add karna hai taki har nod pe likh sken ki kya iske baad ki string palindrome hai?

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	/* ..................... Palindrome Pair................... *///Solution me explain hai achhe se

	public boolean isPalindromePair(ArrayList<String> words) {
		// Your code goes here
       for(int i = 0 ; i<words.size() ; i++){
          // ek ek akr ke words'string lenge
		      String curr = words.get(i);
			  // check krenge kya ye word palindrome hai 2nd condition
			     if(isStringPalindrome(curr)==true)
			         return true;

		          String reversed = "";// string reversed kar ke tries me dalenge
	         for(int j = 0 ; j<curr.length() ; j++)
			         reversed = curr.charAt(j) + reversed;

					 add(reversed);
	             }
	// ad dubara check krenege tries me string bhej bhej ke (pahle to hamne reversed kar ke tries me dala)
	// ab idhar se sidha bhej ke match karenge kya match ho rha reversed me
              for(int i = 0 ; i< words.size() ; i++){

				  boolean currentWord  = isPalindromePairHelper(root,words.get(i));

				  if(currentWord==true)
				  return true;
			  }
            return false;
	}
	// isme match hoga ab jake upar to baki ka kaam ho rha tha
   private boolean isPalindromePairHelper(TrieNode root,String word){
        
		  if(word.length() == 1) {// abhi check hoga kya root terminating hai? (matlab abhi tak match hote hue aaya hai
 // terminating hui matlab do string ko mila ke ek palindrome banaya ja skta hai)
 // ya kya iske root me ke baad ki bachi hue string jo hai kya vo palindrome hai? word khatm hone wala hai
 // matlab root abhi bacha hua hai and baad ki bachi hui string palindrome hai(tries'root ki) to bhi jo strings ko mla ke
 //bnaya ja stkta hai palindroim
		  	return root.isTerminating || root.isPalindrome;
		}
		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) {
// root to end ab___check krenge bachi hua word kya palindrom hai vo return kar denge
			return isStringPalindrome(word);
		}
		return isPalindromePairHelper(child,word.substring(1));
	}

   public void add(String word){
		add(root, word);
	}
  private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
// yaha pe chappe chappe pe check hoga kya bachi hui string palindrome hai vahi store karna hai
        root.isPalindrome = isStringPalindrome(word.substring(1));
		add(child, word.substring(1));

	}
	// to check--> kya string Palindrome hai
	private boolean isStringPalindrome(String str){
		if(str.length()==1)return true;
		if(str.length()==0)return false;
		int si = 0;
		int ei = str.length()-1;

        while(si<=ei){
			if(str.charAt(si) != str.charAt(ei))
			return false;
			si++;
			ei--;
		}
		return true;
	}

//________________________________________________________________________________--
	private boolean search(TrieNode root, String word) {
		if(word.length() == 0) {
			return root.isTerminating;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) {
			return false;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}	
} 
